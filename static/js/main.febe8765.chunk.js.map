{"version":3,"sources":["components/DictionaryList.js","components/SingleRow.js","components/DictionaryView.js","components/NewDictionary.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["DictionaryList","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dictionaries","activeDictionaryId","newDictionary","inherits","createClass","key","value","toggleActiveClass","id","sendActiveDictionary","setState","console","log","active_id","refs","classList","toggle","element","remove","_this2","dictionaries_values","map","dictionary","index","name","title","list_id","react_default","a","createElement","type","disabled","ref","className","onClick","event","showDictionary","Component","SingleRow","handleEditAction","bind","assertThisInitialized","handleSaveAction","handleRemoveAction","handleChangeAction","domain","range","editable","editDisabled","sendRowToRemoveId","fieldName","target","fieldValue","defineProperty","_this$state","Form","Control","onChange","size","defaultValue","ButtonToolbar","Button","variant","DictionaryView","handleAddRowAction","handleRemoveRowAction","activeDictionary","push","splice","rows","item","SingleRow_SingleRow","sendRowData","handleRowData","Table","striped","bordered","NewDictionary","sendNewDictionaryObject","createNewDictionaryObject","dict","forEach","property","configurable","Group","as","Row","Label","column","sm","Col","Main","addDictionary","setActiveDictionary","viewVisible","findActiveDictionary","_this3","entries","find","x","Container","md","DictionaryList_DictionaryList","primary","block","DictionaryView_DictionaryView","NewDictionary_NewDictionary","App","Container_default","Main_Main","Stonegrey","Mystic Black","Midnight Silver","Light Brown","Ocean Blue","Moon beige","Happy Orange","Cherry Red","Shiny yellow","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.febe8765.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class DictionaryList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dictionaries: this.props.dictionaries,\n      activeDictionaryId: null,\n      newDictionary: this.props.newDictionary\n    }\n  }\n\n  componentWillUpdate() {\n    this.toggleActiveClass(this.state.activeDictionaryId);\n  }\n\n  showDictionary(id) {\n    this.props.sendActiveDictionary(id);\n    this.setState({\n      activeDictionaryId: id\n    }, () => console.log());\n    this.toggleActiveClass(id);\n  }\n\n  toggleActiveClass(id) {\n    const active_id = 'list-' + id;\n    if (id !== null) {\n      const element = this.refs[active_id];\n      element.classList.toggle('active');\n    } else if (this.state.newDictionary) {\n      const element = this.refs[active_id];\n      console.log(element);\n      element.classList.remove('active');\n    }\n  }\n\n  render() {\n    const {dictionaries} = this.state;\n    var dictionaries_values = dictionaries.map((dictionary, index)=> {\n      const name = dictionary.title;\n      const list_id = 'list-' + dictionary.id;\n      const key = index;\n\n      return(\n        <button key={key}\n          type='button'\n          disabled={this.props.disabled}\n          ref={list_id}\n          className='Dictionary-list-item' onClick={(event) => this.showDictionary(dictionary.id)}>\n          {name}\n        </button>\n      )\n    });\n\n    return (\n      <div className='Dictionary-list'>\n        {dictionaries_values}\n      </div>\n    )\n  }\n}\n\nDictionaryList.propTypes = {\n  dictionaries: PropTypes.array.isRequired,\n  newDictionary: PropTypes.bool,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ButtonToolbar, Form } from 'react-bootstrap';\n\nexport class SingleRow extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleEditAction = this.handleEditAction.bind(this);\n    this.handleSaveAction = this.handleSaveAction.bind(this);\n    this.handleRemoveAction = this.handleRemoveAction.bind(this);\n    this.handleChangeAction = this.handleChangeAction.bind(this);\n\n    this.state = {\n      domain: this.props.domain,\n      range: this.props.range,\n      id: this.props.id,\n      editable: false,\n      editDisabled: false\n    };\n  }\n\n  componentWillMount() {\n    if ((this.state.domain === '') && (this.state.range === '')) {\n      this.setState({\n        editable: true,\n        editDisabled: true\n      })\n    }\n  }\n\n  handleEditAction(event) {\n    this.setState({\n      editable: true,\n      editDisabled: true\n    })\n  }\n\n  handleSaveAction(event) {\n    this.setState({\n      editable: false,\n      editDisabled: false\n    });\n  }\n\n  handleRemoveAction(event) {\n    let id = this.state.id;\n    this.props.sendRowToRemoveId(id);\n  }\n\n  handleChangeAction(event) {\n    var fieldName = event.target.name;\n    var fieldValue = event.target.value;\n    this.setState({\n      [fieldName]: fieldValue\n    })\n  }\n\n  render() {\n    const {editable, domain, range, id, editDisabled} = this.state;\n\n    return (\n      <tr>\n        {!editable && (\n          <td>{domain}</td>\n        )}\n        {editable && (\n          <td>\n            <Form.Control name='domain'\n              onChange={this.handleChangeAction}\n              type='text'\n              size='sm'\n              defaultValue={domain}>\n            </Form.Control>\n          </td>\n        )}\n        {!editable && (\n          <td>{range}</td>\n        )}\n        {editable && (\n          <td>\n            <Form.Control\n              name='range'\n              onChange={this.handleChangeAction}\n              type='text'\n              size='sm'\n              defaultValue={range}>\n            </Form.Control>\n          </td>\n        )}\n        <td>\n          <ButtonToolbar>\n            <Button\n              onClick={this.handleEditAction}\n              size='sm'\n              value='edit'\n              variant='secondary'\n              disabled={editDisabled}>\n              Edit\n            </Button>\n            <Button\n              onClick={this.handleSaveAction}\n              size='sm'\n              value='save'\n              variant='primary'\n              disabled={!editDisabled}>\n              Save\n            </Button>\n            <Button\n              onClick={this.handleRemoveAction}\n              size='sm'\n              value='delete'\n              variant='danger'>\n              Remove\n            </Button>\n          </ButtonToolbar>\n        </td>\n      </tr>\n    )\n  }\n}\n\nSingleRow.propTypes = {\n  domain: PropTypes.string.isRequired,\n  range: PropTypes.string.isRequired,\n  id: PropTypes.any.isRequired\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {SingleRow} from './SingleRow';\nimport { Table, Button, ButtonToolbar } from 'react-bootstrap';\n\nexport class DictionaryView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAddRowAction = this.handleAddRowAction.bind(this);\n    this.handleRemoveRowAction = this.handleRemoveRowAction.bind(this);\n\n    this.state = {\n      activeDictionary: this.props.activeDictionary,\n      activeDictionaryId: this.props.activeDictionaryId\n    }\n  }\n\n  handleAddRowAction(event) {\n    const newRow = ['',''];\n    const newDictionary = this.state.activeDictionary;\n    newDictionary.push(newRow);\n    this.setState({\n      activeDictionary: newDictionary\n    });\n  }\n\n  handleRemoveRowAction(id) {\n    var dictionary = this.state.activeDictionary;\n    dictionary.splice(id, 1);\n    this.setState({\n      activeDictionary: dictionary\n    });\n  }\n\n  render() {\n    var activeDictionary = this.props.activeDictionary;\n    var {newDictionary} = this.props.newDictionary;\n    var rows = activeDictionary.map((item, index) => {\n      const domain = item[0];\n      const range = item[1];\n      const key = index;\n      return(\n        <SingleRow\n          key={key}\n          id={key}\n          domain={domain}\n          range={range}\n          sendRowToRemoveId={this.handleRemoveRowAction}\n          sendRowData={this.handleRowData}/>\n      )\n    });\n\n    return (\n      <div className='Dictionary-view'>\n        {!newDictionary &&\n          (\n            <Table striped bordered size='sm'>\n              <thead>\n                <tr>\n                  <th>Domain</th>\n                  <th>Range</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {rows}\n              </tbody>\n            </Table>\n          )\n        }\n        <ButtonToolbar>\n          <Button\n            value='addRow'\n            variant='secondary'\n            onClick={this.handleAddRowAction}>\n            Add row\n          </Button>\n        </ButtonToolbar>\n      </div>\n    )\n  }\n}\n\nDictionaryView.propTypes = {\n  activeDictionary: PropTypes.array,\n  newDictionary: PropTypes.bool\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {SingleRow} from './SingleRow';\nimport { Table, Button, ButtonToolbar, Form, Col, Row } from 'react-bootstrap';\n\nexport class NewDictionary extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAddRowAction = this.handleAddRowAction.bind(this);\n    this.handleRemoveRowAction = this.handleRemoveRowAction.bind(this);\n    this.handleChangeAction = this.handleChangeAction.bind(this);\n    this.sendNewDictionaryObject = this.sendNewDictionaryObject.bind(this);\n    this.createNewDictionaryObject = this.createNewDictionaryObject.bind(this);\n\n    this.state = {\n      title: '',\n      id: '',\n      dict: []\n    }\n  }\n\n  handleChangeAction(event) {\n    const fieldName = event.target.name;\n    const fieldValue = event.target.value;\n    this.setState({\n      [fieldName] : fieldValue\n    })\n  }\n\n  handleAddRowAction(event) {\n    const newRow = ['', ''];\n    const newDictionary = this.state.dict;\n    newDictionary.push(newRow);\n    this.setState({\n      dict: newDictionary\n    })\n  }\n\n  handleRemoveRowAction(id) {\n    var dictionary = this.state.dict;\n    dictionary.splice(id, 1);\n    this.setState({\n      dict: dictionary\n    });\n  }\n\n  createNewDictionaryObject(state) {\n    const properties = ['id', 'title', 'dict'];\n    var newDictionary = {};\n    properties.forEach(function(property) {\n      Object.defineProperty(newDictionary, property, {\n          value: state[property],\n          configurable: true\n      });\n    });\n    return newDictionary;\n  }\n\n  sendNewDictionaryObject() {\n    const newDictionary = this.createNewDictionaryObject(this.state);\n    console.log(newDictionary);\n  }\n\n  render() {\n    const {dict, title, id} = this.state;\n    var rows = dict.map((item, index) => {\n      const domain = item[0];\n      const range = item[1];\n      const key = index;\n      return(\n        <SingleRow\n          key={key}\n          id={key}\n          domain={domain}\n          range={range}\n          sendRowToRemoveId={this.handleRemoveRowAction}/>\n      )\n    });\n\n    return (\n      <div className='Dictionary-view'>\n      <Form.Group as={Row}>\n        <Form.Label column sm='2'>Title</Form.Label>\n        <Col sm='10'>\n          <Form.Control name='title'\n            onChange={this.handleChangeAction}\n            type='text'\n            size='sm'\n            defaultValue={title}>\n          </Form.Control>\n        </Col>\n        <Form.Label column sm='2'>Unique ID</Form.Label>\n        <Col sm='10'>\n          <Form.Control name='id'\n            onChange={this.handleChangeAction}\n            type='text'\n            size='sm'\n            defaultValue={id}>\n          </Form.Control>\n        </Col>\n      </Form.Group>\n      <Table striped bordered size='sm'>\n          <thead>\n            <tr>\n              <th>Domain</th>\n              <th>Range</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {rows}\n          </tbody>\n        </Table>\n        <ButtonToolbar>\n          <Button\n            value='addRow'\n            variant='primary'\n            onClick={this.handleAddRowAction}>\n            Add row\n          </Button>\n          <Button\n            onClick={this.sendNewDictionaryObject}\n            value='save'\n            variant='primary'>\n            Save dictionary\n          </Button>\n        </ButtonToolbar>\n      </div>\n    )\n  }\n}\n\nNewDictionary.propTypes = {\n  // activeDictionary: PropTypes.array,\n  // newDictionary: PropTypes.bool\n};\n","import React, { Component } from 'react';\nimport {DictionaryList} from './DictionaryList';\nimport {DictionaryView} from './DictionaryView';\nimport {NewDictionary} from './NewDictionary';\nimport PropTypes from 'prop-types';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\n\nexport class Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addDictionary = this.addDictionary.bind(this);\n    this.setActiveDictionary = this.setActiveDictionary.bind(this);\n\n    this.state = {\n      dictionaries: this.props.dictionaries,\n      viewVisible: false,\n      activeDictionaryId: null,\n      newDictionary: false,\n      activeDictionary: []\n    };\n  }\n\n  setActiveDictionary(id) {\n    const activeDictionary = this.findActiveDictionary(id);\n    this.setState({\n      activeDictionaryId: id,\n      activeDictionary: activeDictionary,\n      viewVisible: true\n    }, () => console.log(this.state));\n  }\n\n  addDictionary(event) {\n    this.setState({\n      newDictionary: true,\n      activeDictionaryId: null,\n      activeDictionary: []\n    }, () => console.log(this.state));\n  }\n\n  findActiveDictionary(id) {\n    var activeDictionary = [];\n    if (id !== null) {\n      activeDictionary = Object.entries(this.state.dictionaries.find(x => x.id === id).dict);\n    }\n    return activeDictionary;\n  }\n\n  render() {\n    const {dictionaries, viewVisible, newDictionary, activeDictionary, activeDictionaryId} = this.state;\n\n    return (\n      <Container>\n        <Row>\n          <Col md={4}>\n            <DictionaryList\n              disabled={newDictionary}\n              dictionaries={dictionaries}\n              sendActiveDictionary={this.setActiveDictionary}\n              newDictionary = {newDictionary}/>\n            <div>\n              <Button\n                primary='true'\n                value='add'\n                size='lg'\n                block\n                onClick={this.addDictionary}>\n                new dictionary\n              </Button>\n            </div>\n          </Col>\n          <Col md={8}>\n            {viewVisible && !newDictionary &&\n              (<DictionaryView\n                  key={activeDictionaryId}\n                  activeDictionary={activeDictionary}\n                  newDictionary={newDictionary}/>\n              )\n            }\n            {newDictionary &&\n              (<NewDictionary/>)\n            }\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nMain.propTypes = {\n  dictionaries: PropTypes.array.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport {Main} from './components/Main';\nimport Container from 'react-bootstrap/Container';\n\nclass App extends Component {\n  render() {\n    const dictionaries = [\n      {'id': 456, 'title': 'Winter palette', 'dict' : {'Stonegrey' : 'grey', 'Mystic Black': 'anthracite', 'Midnight Silver' : 'silver'}},\n      {'id': 323, 'title': 'Autumn palette', 'dict': {'Light Brown': 'grey', 'Ocean Blue': 'blue', 'Moon beige' : 'beige'}},\n      {'id': 723, 'title': 'Summer palette', 'dict': {'Happy Orange': 'orange', 'Cherry Red': 'red', 'Shiny yellow' : 'yellow'}}\n    ];\n\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <Container>\n            <h1 className='App-title'>dictionary manager</h1>\n          </Container>\n        </header>\n        <Main dictionaries={dictionaries}/>\n        <footer className='App-footer'>\n          <Container>\n          </Container>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}