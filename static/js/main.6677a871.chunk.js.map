{"version":3,"sources":["components/DictionaryList.js","components/SingleRow.js","components/DictionaryView.js","models/DictionaryModel.js","components/NewDictionary.js","services/api.js","services/DictionaryService.js","App.js","serviceWorker.js","index.js"],"names":["DictionaryList","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","activeDictionaryId","newDictionary","props","inherits","createClass","key","value","toggleActiveClass","id","sendActiveDictionary","setState","active_id","refs","classList","remove","toggle","_this2","dictionaries_values","dictionaries","map","dictionary","index","name","title","list_id","react_default","a","createElement","type","disabled","ref","className","onClick","event","showDictionary","Component","SingleRow","handleEditAction","bind","assertThisInitialized","handleSaveAction","handleRemoveAction","handleChangeAction","domain","range","editable","editDisabled","sendNewRow","sendRowToRemoveId","fieldName","target","fieldValue","defineProperty","_this$state","Form","Control","onChange","size","defaultValue","ButtonToolbar","Button","variant","DictionaryView","handleAddRowAction","handleRemoveRowAction","handleSaveNewRow","handleSaveChangesAction","activeDictionary","push","console","log","splice","row","result","reduce","arr","sendChangedDictionary","_this3","rows","item","SingleRow_SingleRow","sendRowData","handleRowData","tableVisible","Table","striped","bordered","DictionaryModel","data","dict","NewDictionary","sendNewDictionaryObject","showAlert","reducedDict","reduceArrToObject","sendNewDictionary","handleHide","Group","as","Row","Label","column","sm","Col","Alert","show","onClose","axios","create","baseURL","timeout","headers","Access-Control-Allow-Origin","DictionaryService","API","get","then","response","catch","error","App","viewVisible","addDictionary","setActiveDictionary","saveNewDictionary","saveChangedDictionary","getDictionaries","findActiveDictionary","entries","find","x","_this4","newDictId","newDictionaries","_this5","Container","md","DictionaryList_DictionaryList","primary","block","DictionaryView_DictionaryView","NewDictionary_NewDictionary","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6677a871.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class DictionaryList extends Component {\n    state = {\n      activeDictionaryId: null,\n      newDictionary: this.props.newDictionary\n    }\n\n  componentWillUpdate() {\n    this.toggleActiveClass(this.state.activeDictionaryId);\n  }\n\n  showDictionary(id) {\n    this.props.sendActiveDictionary(id);\n    this.setState({\n      activeDictionaryId: id\n    })\n    this.toggleActiveClass(id);\n  }\n\n  toggleActiveClass(id) {\n    const active_id = 'list-' + id;\n    if ((!this.state.newDictionary) && (id !== null)) {\n      const element = this.refs[active_id];\n      element.classList.toggle('active');\n    } else if (this.state.newDictionary) {\n      const element = this.refs[active_id];\n      element.classList.remove('active');\n    }\n  }\n\n  render() {\n    const {dictionaries} = this.props;\n    var dictionaries_values = dictionaries.map((dictionary, index)=> {\n      const name = dictionary.title;\n      const list_id = 'list-' + dictionary.id;\n\n      return(\n        <li key={list_id}>\n          <button\n            type='button'\n            disabled={this.props.disabled}\n            ref={list_id}\n            className='Dictionary-list-item' onClick={(event) => this.showDictionary(dictionary.id)}>\n            {name}\n          </button>\n        </li>\n      )\n    });\n\n    return (\n      <ul className='Dictionary-list'>\n        {dictionaries_values}\n      </ul>\n    )\n  }\n}\n\nDictionaryList.propTypes = {\n  newDictionary: PropTypes.bool.isRequired\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ButtonToolbar, Form } from 'react-bootstrap';\n\nexport class SingleRow extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleEditAction = this.handleEditAction.bind(this);\n    this.handleSaveAction = this.handleSaveAction.bind(this);\n    this.handleRemoveAction = this.handleRemoveAction.bind(this);\n    this.handleChangeAction = this.handleChangeAction.bind(this);\n\n    this.state = {\n      domain: this.props.domain,\n      range: this.props.range,\n      id: this.props.id,\n      editable: false,\n      editDisabled: false\n    };\n  }\n\n  componentWillMount() {\n    if ((this.state.domain === '') && (this.state.range === '')) {\n      this.setState({\n        editable: true,\n        editDisabled: true\n      })\n    }\n  }\n\n  handleEditAction(event) {\n    this.setState({\n      editable: true,\n      editDisabled: true\n    })\n  }\n\n  handleSaveAction(event) {\n    this.props.sendNewRow(this.state.domain, this.state.range, this.state.id);\n    this.setState({\n      editable: false,\n      editDisabled: false\n    });\n  }\n\n  handleRemoveAction(event) {\n    let id = this.state.id;\n    this.props.sendRowToRemoveId(id);\n  }\n\n  handleChangeAction(event) {\n    var fieldName = event.target.name;\n    var fieldValue = event.target.value;\n    this.setState({\n      [fieldName]: fieldValue\n    })\n  }\n\n  render() {\n    const {editable, domain, range, editDisabled} = this.state;\n\n    return (\n      <tr>\n        {!editable && (\n          <td>{domain}</td>\n        )}\n        {editable && (\n          <td>\n            <Form.Control name='domain'\n              onChange={this.handleChangeAction}\n              type='text'\n              size='sm'\n              defaultValue={domain}>\n            </Form.Control>\n          </td>\n        )}\n        {!editable && (\n          <td>{range}</td>\n        )}\n        {editable && (\n          <td>\n            <Form.Control\n              name='range'\n              onChange={this.handleChangeAction}\n              type='text'\n              size='sm'\n              defaultValue={range}>\n            </Form.Control>\n          </td>\n        )}\n        <td>\n          <ButtonToolbar>\n          {!editable && (\n            <Button\n              onClick={this.handleEditAction}\n              size='sm'\n              value='edit'\n              variant='secondary'\n              disabled={editDisabled}>\n              Edit\n            </Button>\n            )\n          }\n          {editable && (\n            <Button\n              onClick={this.handleSaveAction}\n              size='sm'\n              value='save'\n              variant='success'\n              disabled={!editDisabled}>\n              Done\n            </Button>\n            )\n          }\n            <Button\n              onClick={this.handleRemoveAction}\n              size='sm'\n              value='delete'\n              variant='danger'>\n              Remove\n            </Button>\n          </ButtonToolbar>\n        </td>\n      </tr>\n    )\n  }\n}\n\nSingleRow.propTypes = {\n  domain: PropTypes.string.isRequired,\n  range: PropTypes.string.isRequired,\n  id: PropTypes.any.isRequired\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {SingleRow} from './SingleRow';\nimport { Table, Button, ButtonToolbar } from 'react-bootstrap';\n\nexport class DictionaryView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAddRowAction = this.handleAddRowAction.bind(this);\n    this.handleRemoveRowAction = this.handleRemoveRowAction.bind(this);\n    this.handleSaveNewRow = this.handleSaveNewRow.bind(this);\n    this.handleSaveChangesAction = this.handleSaveChangesAction.bind(this);\n\n    this.state = {\n      activeDictionary: this.props.activeDictionary,\n      activeDictionaryId: this.props.activeDictionaryId\n    }\n  }\n\n  handleAddRowAction(event) {\n    const newRow = ['',''];\n    const newDictionary = this.state.activeDictionary;\n    newDictionary.push(newRow);\n    this.setState({\n      activeDictionary: newDictionary\n    }, () => console.log(this.state));\n  }\n\n  handleRemoveRowAction(id) {\n    var dictionary = this.state.activeDictionary;\n    dictionary.splice(id, 1);\n    this.setState({\n      activeDictionary: dictionary\n    });\n  }\n\n  handleSaveNewRow(domain, range, id) {\n    const row = this.state.activeDictionary[id];\n    row[0] = domain;\n    row[1] = range;\n  }\n\n  handleSaveChangesAction() {\n    var dict = this.state.activeDictionary;\n    const result = dict.reduce(function(map, arr) {\n      map[arr[0]] = arr[1];\n      return map;\n    }, {});\n    this.props.sendChangedDictionary(result);\n  }\n\n  render() {\n    var activeDictionary = this.props.activeDictionary;\n    var rows = activeDictionary.map((item, index) => {\n      const domain = item[0];\n      const range = item[1];\n      const key = index;\n      return(\n        <SingleRow\n          key={key}\n          id={key}\n          domain={domain}\n          range={range}\n          sendRowToRemoveId={this.handleRemoveRowAction}\n          sendRowData={this.handleRowData}\n          sendNewRow={this.handleSaveNewRow}/>\n      )\n    });\n    const tableVisible = (activeDictionary.length >= 1) ? true : false;\n\n    return (\n      <div className='Dictionary-view'>\n            <Table striped bordered size='sm'>\n            {tableVisible && (\n              <thead>\n                <tr>\n                  <th>Domain</th>\n                  <th>Range</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n            )}\n              <tbody>\n                {rows}\n              </tbody>\n            </Table>\n        <ButtonToolbar>\n          <Button\n            value='addRow'\n            variant='secondary'\n            onClick={this.handleAddRowAction}>\n            Add row\n          </Button>\n          <Button\n            value='save'\n            variant='primary'\n            onClick={this.handleSaveChangesAction}>\n            Save changes\n          </Button>\n        </ButtonToolbar>\n      </div>\n    )\n  }\n}\n\nDictionaryView.propTypes = {\n  activeDictionary: PropTypes.array,\n  newDictionary: PropTypes.bool\n};\n","export class DictionaryModel {\n  id;\n  title;\n  dict;\n\n  constructor(data){\n    this.id = data.id;\n    this.title = data.title;\n    this.dict = data.dict;\n  }\n}\n","import React, { Component } from 'react';\nimport {SingleRow} from './SingleRow';\nimport {DictionaryModel} from '../models/DictionaryModel';\nimport { Table, Button, ButtonToolbar, Form, Col, Row, Alert } from 'react-bootstrap';\n\nexport class NewDictionary extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAddRowAction = this.handleAddRowAction.bind(this);\n    this.handleRemoveRowAction = this.handleRemoveRowAction.bind(this);\n    this.handleChangeAction = this.handleChangeAction.bind(this);\n    this.sendNewDictionaryObject = this.sendNewDictionaryObject.bind(this);\n    this.handleSaveNewRow = this.handleSaveNewRow.bind(this);\n\n    this.state = {\n      title: null,\n      id: null,\n      dict: [],\n      showAlert: false\n    }\n  }\n\n  handleChangeAction(event) {\n    const fieldName = event.target.name;\n    const fieldValue = event.target.value;\n    this.setState({\n      [fieldName] : fieldValue\n    })\n  }\n\n  handleAddRowAction(event) {\n    const newDictionary = this.state.dict;\n    const item = ['', ''];\n    newDictionary.push(item);\n    this.setState({\n      dict: newDictionary\n    }, () => console.log(this.state))\n  }\n\n  handleRemoveRowAction(id) {\n    var dictionary = this.state.dict;\n    dictionary.splice(id, 1);\n    this.setState({\n      dict: dictionary\n    });\n  }\n\n  reduceArrToObject(dictionary) {\n    const result = dictionary.reduce(function(map, arr) {\n      map[arr[0]] = arr[1];\n      return map;\n    }, {});\n    return result;\n  }\n\n  sendNewDictionaryObject() {\n    if ((this.state.title == null) && (this.state.id == null)) {\n      this.setState({\n        showAlert: true\n      })\n    } else {\n      const newDictionary = new DictionaryModel(this.state);\n      const reducedDict = this.reduceArrToObject(newDictionary.dict);\n      newDictionary.dict = reducedDict;\n      this.props.sendNewDictionary(newDictionary)\n    }\n  }\n\n  handleSaveNewRow(domain, range, id) {\n    const row = this.state.dict[id];\n    row[0] = domain;\n    row[1] = range;\n  }\n\n  render() {\n    const handleHide = () => this.setState({ showAlert: false });\n    const {dict, title, id, showAlert} = this.state;\n    var rows = dict.map((item, index) => {\n      const domain = item[0];\n      const range = item[1];\n      const key = index;\n      return(\n        <SingleRow\n          key={key}\n          id={key}\n          domain={domain}\n          range={range}\n          sendRowToRemoveId={this.handleRemoveRowAction}\n          sendNewRow={this.handleSaveNewRow}/>\n      )\n    });\n    const tableVisible = (dict.length >= 1) ? true : false;\n\n    return (\n      <div className='Dictionary-view'>\n      <Form.Group as={Row}>\n        <Form.Label column sm='2'>Title</Form.Label>\n        <Col sm='10'>\n          <Form.Control name='title'\n            onChange={this.handleChangeAction}\n            type='text'\n            size='sm'\n            defaultValue={title}>\n          </Form.Control>\n        </Col>\n        <Form.Label column sm='2'>Unique ID</Form.Label>\n        <Col sm='10'>\n          <Form.Control name='id'\n            onChange={this.handleChangeAction}\n            type='text'\n            size='sm'\n            defaultValue={id}>\n          </Form.Control>\n        </Col>\n      </Form.Group>\n      <Table striped bordered size='sm'>\n        {tableVisible && (\n          <thead>\n            <tr>\n              <th>Domain</th>\n              <th>Range</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n        )}\n          <tbody>\n            {rows}\n          </tbody>\n        </Table>\n        <ButtonToolbar>\n          <Button\n            value='addRow'\n            variant='secondary'\n            onClick={this.handleAddRowAction}>\n            Add row\n          </Button>\n          <Button\n            onClick={this.sendNewDictionaryObject}\n            value='save'\n            variant='primary'>\n            Save dictionary\n          </Button>\n          <Button\n            onClick={this.sendNewDictionaryObject}\n            value='dismiss'\n            variant='danger'>\n            Dismiss\n          </Button>\n        </ButtonToolbar>\n        <div className='Dictionary-view-alert'>\n          <Alert show={showAlert} variant='danger' onClose={handleHide}>\n              <span>\n                You cannot save dictionary without title and id!\n              </span>\n              <span className='Dictionary-view-alert-button' type='button' onClick={handleHide}>\n                x\n              </span>\n            </Alert>\n          </div>\n      </div>\n    )\n  }\n}\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: `http://my-json-server.typicode.com/alicjaotto/dictionaries-mock-data/`,\n  timeout: 1000,\n  headers: {'Access-Control-Allow-Origin': '*'}\n});\n","import API from './api';\nimport {DictionaryModel} from '../models/DictionaryModel';\n\nexport class DictionaryService {\n\n  static getDictionaries() {\n    return API.get(`/dictionaries`)\n      .then(response => {\n        return response.data.map(item => new DictionaryModel(item));\n      })\n      .catch(error => {\n        console.log('an error occured during resolving your promise');\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport {DictionaryList} from './components/DictionaryList';\nimport {DictionaryView} from './components/DictionaryView';\nimport {NewDictionary} from './components/NewDictionary';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport {DictionaryService} from './services/DictionaryService';\n\nclass App extends Component {\n  state = {\n    dictionaries: [],\n    viewVisible: false,\n    activeDictionaryId: null,\n    newDictionary: false,\n    activeDictionary: []\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.addDictionary = this.addDictionary.bind(this);\n    this.setActiveDictionary = this.setActiveDictionary.bind(this);\n    this.saveNewDictionary = this.saveNewDictionary.bind(this);\n    this.saveChangedDictionary = this.saveChangedDictionary.bind(this);\n  }\n\n  componentDidMount() {\n    DictionaryService.getDictionaries().then(dictionaries => {\n      this.setState({\n        dictionaries: dictionaries\n      }, () => console.log(this.state.dictionaries))\n    })\n  }\n\n  setActiveDictionary(id) {\n    const activeDictionary = this.findActiveDictionary(id);\n    this.setState({\n      activeDictionaryId: id,\n      activeDictionary: activeDictionary,\n      viewVisible: true,\n      newDictionary: false\n    }, () => console.log(this.state))\n  }\n\n  addDictionary(event) {\n    this.setState({\n      newDictionary: true,\n      activeDictionaryId: null,\n      activeDictionary: []\n    });\n  }\n\n  findActiveDictionary(id) {\n    var activeDictionary = [];\n    if (id !== null) {\n      activeDictionary = Object.entries(this.state.dictionaries.find(x => x.id === id).dict);\n    }\n    return activeDictionary;\n  }\n\n  saveNewDictionary(dictionary) {\n    if (dictionary == null) {\n      console.log('no value');\n    } else {\n      const newDictId = dictionary.id;\n      const newDictionaries = this.state.dictionaries;\n      newDictionaries.push(dictionary);\n      this.setState({\n        dictionaries: newDictionaries,\n      }, () => console.log(this.state))\n      this.setActiveDictionary(newDictId);\n    }\n  }\n\n  saveChangedDictionary(dictionary) {\n    var editedDictionary = this.state.dictionaries.find(x => x.id === this.state.activeDictionaryId);\n    editedDictionary.dict = dictionary;\n  }\n\n  render() {\n    const {dictionaries, viewVisible, newDictionary, activeDictionary, activeDictionaryId} = this.state;\n\n    return (\n      <div className='App'>\n        <header className='App-header'>\n          <h1 className='App-title'>dictionary manager</h1>\n          <nav className='App-menu'>\n            <ul className='App-menu-nav'>\n              <li className='App-menu-nav-link'>support</li>\n              <li className='App-menu-nav-link'>log out</li>\n            </ul>\n          </nav>\n        </header>\n        <Container>\n          <Row>\n            <Col md={4}>\n              <DictionaryList\n                disabled={newDictionary}\n                dictionaries={dictionaries}\n                sendActiveDictionary={this.setActiveDictionary}\n                newDictionary={newDictionary}\n                activeDictionaryId={activeDictionaryId}/>\n              <div>\n                <Button\n                  disabled={newDictionary}\n                  primary='true'\n                  value='add'\n                  size='lg'\n                  block\n                  onClick={this.addDictionary}>\n                  new dictionary\n                </Button>\n              </div>\n            </Col>\n            <Col md={8}>\n              {viewVisible && !newDictionary &&\n                (<DictionaryView\n                    key={activeDictionaryId}\n                    activeDictionary={activeDictionary}\n                    newDictionary={newDictionary}\n                    sendChangedDictionary={this.saveChangedDictionary}/>\n                )\n              }\n              {newDictionary &&\n                (<NewDictionary sendNewDictionary={this.saveNewDictionary}/>)\n              }\n            </Col>\n          </Row>\n        </Container>\n        <footer className='App-footer'>\n          <Container>\n          </Container>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}